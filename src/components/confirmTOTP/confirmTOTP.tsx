// Copyright 2021 - 2023 Universität Tübingen, DKFZ, EMBL, and Universität zu Köln
// for the German Human Genome-Phenome Archive (GHGA)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import { faCircleArrowRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useState } from "react";
import {
  Button,
  Container,
  Modal,
  OverlayTrigger,
  Tooltip,
} from "react-bootstrap";
import { useNavigate } from "react-router-dom";

const ConfirmTOTP = () => {
  const navigate = useNavigate();
  const [showModal, setShowModal] = useState(false);
  const [showError, setShowError] = useState(false);
  const [inputtedTOTP, setInputtedTOTP] = useState("");

  const LostTOTPModal = (props: any) => {
    const [disabledNewTOTPButton, setDisabledNewTOTPButton] = useState(true);
    return (
      <Modal show={showModal} size="lg" onHide={() => setShowModal(false)}>
        <Modal.Header>
          <Modal.Title>Create new setup for authenticator app</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>
            In the case that you lost your phone or the setup of your
            authenticator app, you can create a new authentication code setup.
          </p>
          <p className="fw-bold">
            However, all independent addresses that had been verified before
            will need to be verified again
          </p>

          <div>
            <input
              type="checkbox"
              id="agree"
              className="me-2"
              onChange={(e) => {
                setDisabledNewTOTPButton(!e.target.checked);
                console.log(e.target.checked);
              }}
            />
            <label htmlFor="agree" className="d-inline">
              I acknowledge that all previous verification methods will require
              re-verification if a new TOTP setup is requested
            </label>
          </div>
          <br />
          <Button
            disabled={disabledNewTOTPButton}
            onClick={() => {
              navigate("/setup-totp");
            }}
          >
            <FontAwesomeIcon icon={faCircleArrowRight} />
            &nbsp; Continue
          </Button>
          <Button
            variant="gray"
            className="ms-2 text-white"
            onClick={() => setShowModal(false)}
          >
            Cancel
          </Button>
        </Modal.Body>
      </Modal>
    );
  };

  return (
    <Container className="mt-4">
      <h2>Two-step authentication</h2>
      <LostTOTPModal />
      <div className="w-100">
        <p>
          Please enter the 6-digit authentication code generated by your
          authenticator app
        </p>
        <form
          onSubmit={(e) => {
            e.preventDefault();
            if (inputtedTOTP === "123456") navigate("/");
            else setShowError(true);
          }}
        >
          <OverlayTrigger
            placement="right"
            overlay={<Tooltip>Invalid code entered</Tooltip>}
            rootClose={true}
            show={showError}
          >
            <input
              type="text"
              className="text-center"
              required
              minLength={6}
              maxLength={6}
              size={6}
              onChange={(e) => {
                setInputtedTOTP(e.target.value);
              }}
            />
          </OverlayTrigger>
          <div className="mt-4">
            <Button type="submit">
              <FontAwesomeIcon icon={faCircleArrowRight} />
              &nbsp; Continue
            </Button>
            <Button
              variant="gray"
              className="ms-2 text-white"
              onClick={() => setShowModal(true)}
            >
              Code cannot be generated
            </Button>
          </div>
        </form>
      </div>
    </Container>
  );
};

export default ConfirmTOTP;
