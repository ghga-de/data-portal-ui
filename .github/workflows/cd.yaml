name: CD

on:
  release:
    types: [published]
      # trigger only on new release

jobs:
  verify_version:
    runs-on: ubuntu-latest
    outputs:
      # export to be used in other jobs
      version: ${{ steps.get_version_tag.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        name: Check out code

      - name: Install jq
        run: sudo apt-get install -y jq

      - id: get_version_tag
        name: Get version tag
        run: |
          TAG_VER="${GITHUB_REF##*/}"
          # set as output:
          echo "version: ${TAG_VER}"
          echo "version=${TAG_VER}" >> $GITHUB_OUTPUT

      - id: verify_semantic_tag_format
        name: Verify tag format
        # format must be compatible with semantic versioning
        run: |
          SEMVER_REGEX="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"
          if echo "${{ steps.get_version_tag.outputs.version }}" | grep -Eq "$SEMVER_REGEX"; then
            echo "Tag format is valid"
          else
            echo "Invalid tag format: ${{ steps.get_version_tag.outputs.version }}"
            exit 1
          fi

      - id: verify_package_version
        name: Verify package version vs tag version
        # package version must be same with tag version
        run: |
          PKG_VER="$(jq -r .version package.json)"
          echo "Package version is $PKG_VER" >&2
          echo "Tag version is ${{ steps.get_version_tag.outputs.version }}" >&2
          if [ "$PKG_VER" != "${{ steps.get_version_tag.outputs.version }}" ]; then
            echo "Package version and tag name mismatch." >&2
            exit 1
          fi

  push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: verify_version
    steps:
      - uses: actions/checkout@v3
        name: Check out code

      - uses: docker/setup-qemu-action@v2.0.0
        name: Set up QEMU

      - uses: docker/setup-buildx-action@v2.5.0
        name: Set up Docker Buildx

      - uses: docker/login-action@v2.1.0
        name: Login to DockerHub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v4.0.0
        name: Build and push
        id: docker_build
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: "ghga/${{ github.event.repository.name }}:${{ needs.verify_version.outputs.version }}"

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: "docker.io/ghga/${{ github.event.repository.name }}:${{ needs.verify_version.outputs.version }}"
      #     format: "table"
      #     exit-code: "1"
      #     ignore-unfixed: true
      #     vuln-type: "os,library"
      #     severity: "CRITICAL,HIGH"

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
